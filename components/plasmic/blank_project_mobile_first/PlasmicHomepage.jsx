// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dYY4WTnFJa6E3gQ6UtpzZr
// Component: za13ZMGJzSMq
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { PlasmicHead } from "@plasmicapp/react-web"; // plasmic-import: OzDnIAFRPr/codeComponent
import Navbar from "../../Navbar"; // plasmic-import: w5cPtDDpTd/component
import Button from "../../Button"; // plasmic-import: WdgdJRuzKl/component
import { useScreenVariants as useScreenVariants_0H88I8ZsG8KL } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 0H88I8zsG8K-L/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_bee_triggered_tailwind_css from "../bee_triggered_tailwind/plasmic_bee_triggered_tailwind.module.css"; // plasmic-import: kPvWwGStXT61ChMSrBJT5X/projectcss
import projectcss from "./plasmic_blank_project_mobile_first.module.css"; // plasmic-import: dYY4WTnFJa6E3gQ6UtpzZr/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: za13ZMGJzSMq/css

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_0H88I8ZsG8KL()
  });
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />

        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_bee_triggered_tailwind_css.plasmic_tokens,
            sty.root
          )}
        >
          <PlasmicHead
            data-plasmic-name={"head"}
            data-plasmic-override={overrides.head}
            className={classNames("__wab_instance", sty.head)}
            description={
              "Our BuzzBox devices are the ultimate plug and play security solution for your network. Just plug the BuzzBox into an ethernet port, and you'll be instantly alerted when suspicious activity on the network is detected."
            }
            image={"/plasmic/bee_triggered_marketing/images/logosvg.svg"}
            title={"Home | Bee Triggered"}
          />

          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zrTaa)}
            >
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__hVq3S)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__q8X1G)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kEye
                      )}
                    >
                      {"Stay Ahead of Cyber Criminals"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ywWyg
                      )}
                    >
                      {
                        "Our BuzzBox devices are the ultimate plug and play security solution for your network. Just plug the BuzzBox into an ethernet port, and you'll be instantly alerted when suspicious activity on the network is detected."
                      }
                    </div>
                  </p.Stack>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___6Jw0)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__ydy7I
                      )}
                      onClick={async () => {
                        const $steps = {};
                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "navigation",
                                    interactionUuid: "4_QPjWb9m",
                                    componentUuid: "za13ZMGJzSMq",
                                    argName: "destination"
                                  },
                                  () => "/#learnmore"
                                )
                              };
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "navigation",
                                  interactionUuid: "4_QPjWb9m",
                                  componentUuid: "za13ZMGJzSMq"
                                },
                                () =>
                                  (({ destination }) => {
                                    __nextRouter?.push(destination);
                                  })?.apply(null, [actionArgs]),
                                actionArgs
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "navigation",
                              interactionUuid: "4_QPjWb9m",
                              componentUuid: "za13ZMGJzSMq"
                            },
                            $steps["goToPage"]
                          );
                        }
                      }}
                    >
                      {"Learn More"}
                    </Button>
                    <Button
                      className={classNames("__wab_instance", sty.button__dbPr)}
                      onClick={async () => {
                        const $steps = {};
                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "navigation",
                                    interactionUuid: "x-tsLEVhy",
                                    componentUuid: "za13ZMGJzSMq",
                                    argName: "destination"
                                  },
                                  () =>
                                    "https://buy.stripe.com/5kA4igaM4cb283C6op"
                                )
                              };
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "navigation",
                                  interactionUuid: "x-tsLEVhy",
                                  componentUuid: "za13ZMGJzSMq"
                                },
                                () =>
                                  (({ destination }) => {
                                    __nextRouter?.push(destination);
                                  })?.apply(null, [actionArgs]),
                                actionArgs
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "navigation",
                              interactionUuid: "x-tsLEVhy",
                              componentUuid: "za13ZMGJzSMq"
                            },
                            $steps["goToPage"]
                          );
                        }
                      }}
                      primary={true}
                    >
                      {"Get Started ->"}
                    </Button>
                  </p.Stack>
                </div>
              ) : null}
              {(hasVariant(globalVariants, "screen", "md") ? true : true) ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__x927V)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "md") ? "100%" : "auto"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "md") ? "30%" : "100%"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_project_mobile_first/images/screenshot20230418At12734PMpng.png",
                    fullWidth: 1268,
                    fullHeight: 1152,
                    aspectRatio: undefined
                  }}
                />
              ) : null}
            </p.Stack>
          ) : null}
          {true ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__fbw9O)}
              id={"learnmore"}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___4FTbq)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ozGiy
                  )}
                >
                  {"Custom Alerts"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wgLxJ
                  )}
                >
                  {"Get Alerts Your Way"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__suvzd
                  )}
                >
                  {
                    "Bee Triggered gives you the flexibility to receive alerts your way. Whether it's email, text, Microsoft Teams, Slack, or any other method you prefer, you'll always be informed of any suspicious activity on your network. With Bee Triggered, you won't miss important alerts and can stay on top of your network security."
                  }
                </div>
              </p.Stack>
              <div className={classNames(projectcss.all, sty.freeBox___1LuVi)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rqh15
                  )}
                >
                  {"Email"}
                </div>
                {true ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__z5If8
                    )}
                  >
                    {"Text Message"}
                  </div>
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dAgOw
                  )}
                >
                  {"Microsoft Teams"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oW8Do
                  )}
                >
                  {"Slack"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__btyHr
                  )}
                >
                  {"And more ..."}
                </div>
              </div>
            </div>
          ) : null}
          {true ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__onR9C)}
              id={``}
            >
              <div className={classNames(projectcss.all, sty.freeBox__g29L8)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___5KSmo)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/bee_triggered_tailwind/images/screenshot20230417At34959PMpng.png",
                    fullWidth: 3024,
                    fullHeight: 1556,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__oQhvj)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iexY
                  )}
                >
                  {"Dashboard"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ww3Bg
                  )}
                >
                  {"Private Dashboard"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ranyA
                  )}
                >
                  {
                    "Every customer gets their own private dashboard on their own subdomain. This means that each customer has a unique web address where they can access their dashboard and view data related to their specific account. "
                  }
                </div>
              </p.Stack>
            </div>
          ) : null}
          {true ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__ndIlx)}
              id={"pricing"}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__m8Zgb)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bRuIo
                  )}
                >
                  {"Pricing"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__dardh)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___3UJb)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l5Pos
                      )}
                    >
                      {"$60"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2Bxsl
                      )}
                    >
                      {"/ month / device"}
                    </div>
                  </p.Stack>
                  <Button
                    className={classNames("__wab_instance", sty.button___40W9R)}
                    onClick={async () => {
                      const $steps = {};
                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "navigation",
                                  interactionUuid: "o_HDtWFC6",
                                  componentUuid: "za13ZMGJzSMq",
                                  argName: "destination"
                                },
                                () =>
                                  "https://buy.stripe.com/5kA4igaM4cb283C6op"
                              )
                            };
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "navigation",
                                interactionUuid: "o_HDtWFC6",
                                componentUuid: "za13ZMGJzSMq"
                              },
                              () =>
                                (({ destination }) => {
                                  __nextRouter?.push(destination);
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "navigation",
                            interactionUuid: "o_HDtWFC6",
                            componentUuid: "za13ZMGJzSMq"
                          },
                          $steps["goToPage"]
                        );
                      }
                    }}
                    primary={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qEmYw
                      )}
                    >
                      {"Get Started"}
                    </div>
                  </Button>
                </div>
              </p.Stack>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "head", "navbar"],
  head: ["head"],
  navbar: ["navbar"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    head: makeNodeComponent("head"),
    navbar: makeNodeComponent("navbar"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Home | Bee Triggered",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/badbdbf6c51a48e6485d70e74629c653.svg",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
